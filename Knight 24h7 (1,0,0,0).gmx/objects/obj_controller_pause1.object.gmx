<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-20000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Declare variables for pause event

// This controller will deactivate all instances in the room
// bisides itself. This means that all instances dissapear when
// being deactivated. The screenshot will be taken before that happens.
// Make sure this controller is in front of everything, even tiles.


deactivated = false;      // Whether or not the instances in the room have been deactivated
pause_col=make_color_rgb(40,40,40); // Color of the pause screen (darken the screen)
//pause_bg = -1;            // Background to draw on the pause menu


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for pause key pressed / unpause

if global.activeButtonPause == true
  {
  //instance_activate_all();
  // This makes sure we press the pause key once
  //io_clear();
  // Pause or unpause depending on the visibility of the controller
  if (visible = false) {visible = true; global.game_paused = true;} //else {game_paused = false;}
  }
  /*
 for (var i = 0; i &lt; 8; ++i) {
 //Menu
        if (device_mouse_check_button_pressed(i, mb_left) &amp;&amp; device_mouse_x(i) &gt; view_xview[0] + 208 &amp;&amp; device_mouse_x(i) &lt; view_xview[0] + 240 &amp;&amp; device_mouse_y(i) &gt; view_yview[0] + 240 &amp;&amp; device_mouse_y(i) &lt; view_yview[0] + 272){
            global.pressButtonMenu = true
   
            }
        if (device_mouse_check_button_released(i, mb_left) &amp;&amp; device_mouse_x(i) &gt; view_xview[0] + 208 &amp;&amp; device_mouse_x(i) &lt; view_xview[0] + 240 &amp;&amp; device_mouse_y(i) &gt; view_yview[0] + 240 &amp;&amp; device_mouse_y(i) &lt; view_yview[0] + 272){           
            global.pressButtonMenu = false
            global.activeButtonPause = false
            global.game_paused = false; 
            if !room = room85{
            global.target = room85
            }
            instance_create(0,0,oFxRoomGoToTarget) 

        } 
 //Continue
        if (device_mouse_check_button_pressed(i, mb_left) &amp;&amp; device_mouse_x(i) &gt; view_xview[0] + 304 &amp;&amp; device_mouse_x(i) &lt; view_xview[0] + 336 &amp;&amp; device_mouse_y(i) &gt; view_yview[0] + 240 &amp;&amp; device_mouse_y(i) &lt; view_yview[0] + 272){
            global.pressButtonContinue = true
   
            }
        if (device_mouse_check_button_released(i, mb_left) &amp;&amp; device_mouse_x(i) &gt; view_xview[0] + 304 &amp;&amp; device_mouse_x(i) &lt; view_xview[0] + 336 &amp;&amp; device_mouse_y(i) &gt; view_yview[0] + 240 &amp;&amp; device_mouse_y(i) &lt; view_yview[0] + 272){          
            global.pressButtonContinue = false
            global.activeButtonPause = false
            global.game_paused = false; 
        }
 //Restart
        if (device_mouse_check_button_pressed(i, mb_left) &amp;&amp; device_mouse_x(i) &gt; view_xview[0] + 400 &amp;&amp; device_mouse_x(i) &lt; view_xview[0] + 432 &amp;&amp; device_mouse_y(i) &gt; view_yview[0] + 240 &amp;&amp; device_mouse_y(i) &lt; view_yview[0] + 272){
            global.pressButtonRestart = true
   
            }
        if (device_mouse_check_button_released(i, mb_left) &amp;&amp; device_mouse_x(i) &gt; view_xview[0] + 400 &amp;&amp; device_mouse_x(i) &lt; view_xview[0] + 432 &amp;&amp; device_mouse_y(i) &gt; view_yview[0] + 240 &amp;&amp; device_mouse_y(i) &lt; view_yview[0] + 272){
            global.pressButtonRestart = false
            global.activeButtonPause = false
            global.game_paused = false; 
            room_restart();

        }

}*/
   
if (visible = false) {exit;}

// Reactivate all instances and unpause
if (global.game_paused = false &amp;&amp; deactivated = true)
  {
  // Free memory of background data
  //if (background_exists(pause_bg) = true) {background_delete(pause_bg)}
  // Reactivate all objects
  //instance_activate_all();
  deactivated = false;
  // Hide pause screen
  visible = false;
  }  










</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Make sure game is paused
if (global.game_paused = true &amp;&amp; visible = true)
  {
  // Make sure instances are not yet deactivated to capture screen
  if (deactivated = false)
    {
    // Capture the screen
    //pause_bg = scr_screen_capture();
    // Deactivate all instances besides this controler
    //instance_deactivate_object(false)
    deactivated = true;  
    }
    // Draw our pause screen
    //draw_background_ext(pause_bg,view_xview[0],view_yview[0],1,1,0,pause_col,1); 

  draw_background_ext(bg_back,view_xview[0],view_yview[0],1,1,0,pause_col,1); 
  draw_sprite(sFontPause,-1,room_width/2,room_height/3)
//Menu
/*
if global.pressButtonMenu = true {
    draw_sprite(sButtonMenu, 1, view_xview[0] + 208,view_yview[0] + 240); 
}else{
    draw_sprite(sButtonMenu, 0, view_xview[0] + 208,view_yview[0] + 240);    
}
*/
//instance_create(view_xview[0] + 224,view_yview[0] + 256,oButtonBackMenu);
//Continue
/*if global.pressButtonContinue = true {
    draw_sprite(sButtonContinue, 1, view_xview[0] + 304,view_yview[0] + 240); 
}else{
    draw_sprite(sButtonContinue, 0, view_xview[0] + 304,view_yview[0] + 240);    
}
*/
instance_create(view_xview[0] + 320,view_yview[0] + 256,oButtonContinue);
//Restart
/*if global.pressButtonRestart = true {
    draw_sprite(sButtonRestart, 1, view_xview[0] + 400,view_yview[0] + 240); 
}else{
    draw_sprite(sButtonRestart, 0, view_xview[0] + 400,view_yview[0] + 240);    
}
*/
instance_create(view_xview[0] + 416,view_yview[0] + 256,oButtonRestart);
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
