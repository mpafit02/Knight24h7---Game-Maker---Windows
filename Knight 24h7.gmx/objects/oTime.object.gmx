<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*time1 = current_second + current_minute * 60 + current_hour *24 ;
lives = 10;
maxlives = 30;*/
//global.death = 0;
/*global.seconds = 0;

//deaths
global.lvl1deaths = 0;
global.lvl2deaths = 0;
global.lvl3deaths = 0;
global.lvl4deaths = 0;
global.lvl5deaths = 0;

//time
global.lvl1time = 0;
global.lvl2time = 0;
global.lvl3time = 0;
global.lvl4time = 0;
global.lvl5time = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (current_second + current_minute * 60 + current_hour *24 = time1 + 300) {
    if lives &lt;&gt; maxlives{
        lives = lives + 1;  
    }
    time1 = current_second + current_minute * 60 + current_hour *24 ;
}

//Increase Time
global.seconds += 1/room_speed;

if lives &lt;&gt; maxlives{
    if (maxlives - lives &lt;= global.timediference / 300){
        lives = maxlives;
    }else{
        lives = lives + (global.timediference / 300);
    }
    global.timediference = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*global.seconds = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_text(view_xview[0] + 16, view_yview[0] + 16, string("Press 'P' to toggle touch controls on/off"));
/*draw_set_colour(c_white);
if global.activeButtonPause == false { 
if (instance_exists(oTouchCompatible)) {
    if instance_exists(oCrateBlood){
        draw_sprite(sDownArrow, 2, view_xview[0] + 640 -96 - 8, view_yview[0] + 360 - 64 -8); 
        draw_sprite(sLeftArrow, 2, view_xview[0] + 8, view_yview[0] + 360 - 64 -8 );  
        draw_sprite(sRightArrow, 2, view_xview[0] + 8 + 96 + 8, view_yview[0] + 360 - 64 -8 );
        draw_sprite(sAtkButton, 2, view_xview[0] + 640 - 96 - 8 - 96 - 8, view_yview[0] + 360 - 64 -8); 
        draw_sprite(sJumpButton, 2, view_xview[0] + 640 - 96 - 8, view_yview[0] + 360 - 64 -8 - 64 - 8); 
    }else{
    if global.pressD = true {
    draw_sprite(sDownArrow, 1, view_xview[0] + 640 -96 - 8,view_yview[0] + 360 - 64 -8); 
    }else{
    draw_sprite(sDownArrow, 0, view_xview[0] + 640 -96 - 8,view_yview[0] + 360 - 64 -8);    
    }
    if global.pressL = true {
    draw_sprite(sLeftArrow, 1, view_xview[0] + 8, view_yview[0] + 360 - 64 -8 ); 
    }else{
    draw_sprite(sLeftArrow, 0, view_xview[0] + 8, view_yview[0] + 360 - 64 -8 );     
    }
    if global.pressR = true {
    draw_sprite(sRightArrow, 1, view_xview[0] + 8 + 96 + 8, view_yview[0] + 360 - 64 -8 );
    }else{ 
    draw_sprite(sRightArrow, 0, view_xview[0] + 8 + 96 + 8, view_yview[0] + 360 - 64 -8 );
    } 
    if global.pressA = true {
    draw_sprite(sAtkButton, 1, view_xview[0] + 640 - 96 - 8 - 96 - 8, view_yview[0] + 360 - 64 -8); 
    }else{ 
    draw_sprite(sAtkButton, 0, view_xview[0] + 640 - 96 - 8 - 96 - 8, view_yview[0] + 360 - 64 -8);  
    } 
    if global.pressJ = true {
    draw_sprite(sJumpButton, 1, view_xview[0] + 640 - 96 - 8, view_yview[0] + 360 - 64 -8 - 64 - 8);
    }else{ 
    draw_sprite(sJumpButton, 0, view_xview[0] + 640 - 96 - 8, view_yview[0] + 360 - 64 -8 - 64 - 8);
    } 
  }  

}
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
